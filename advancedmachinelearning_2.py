# -*- coding: utf-8 -*-
"""AdvancedMachineLearning_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RJoFs6VhcbNrbRqmPyDls4dTlZosWp2U

29.10.2024

https://home.agh.edu.pl/~mdig/dokuwiki/doku.php?id=teaching:data_science:ml_en:topics:nn_intro

https://pytorch.org/audio/stable/tutorials/speech_recognition_pipeline_tutorial.html

# Task 3 - tutorial
"""

import torch
import torchaudio

print(torch.__version__)
print(torchaudio.__version__)

torch.random.manual_seed(0)
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

print(device)

import IPython
import matplotlib.pyplot as plt
from torchaudio.utils import download_asset

SPEECH_FILE = download_asset("tutorial-assets/Lab41-SRI-VOiCES-src-sp0307-ch127535-sg0042.wav")

SPEECH_FILE

bundle = torchaudio.pipelines.WAV2VEC2_ASR_BASE_960H

print("Sample Rate:", bundle.sample_rate)

print("Labels:", bundle.get_labels())

model = bundle.get_model().to(device)

print(model.__class__)

IPython.display.Audio(SPEECH_FILE)

waveform, sample_rate = torchaudio.load(SPEECH_FILE)
waveform = waveform.to(device)

if sample_rate != bundle.sample_rate:
    waveform = torchaudio.functional.resample(waveform, sample_rate, bundle.sample_rate)

with torch.inference_mode():
    features, _ = model.extract_features(waveform)

fig, ax = plt.subplots(len(features), 1, figsize=(16, 4.3 * len(features)))
for i, feats in enumerate(features):
    ax[i].imshow(feats[0].cpu(), interpolation="nearest")
    ax[i].set_title(f"Feature from transformer layer {i+1}")
    ax[i].set_xlabel("Feature dimension")
    ax[i].set_ylabel("Frame (time-axis)")
fig.tight_layout()

with torch.inference_mode():
    emission, _ = model(waveform)

emission.shape

len(bundle.get_labels())

plt.imshow(emission[0].cpu().T, interpolation="nearest")
plt.title("Classification result")
plt.xlabel("Frame (time-axis)")
plt.ylabel("Class")
plt.tight_layout()
print("Class labels:", bundle.get_labels())

class GreedyCTCDecoder(torch.nn.Module):
    def __init__(self, labels, blank=0):
        super().__init__()
        self.labels = labels
        self.blank = blank

    def forward(self, emission: torch.Tensor) -> str:
        """Given a sequence emission over labels, get the best path string
        Args:
          emission (Tensor): Logit tensors. Shape `[num_seq, num_label]`.

        Returns:
          str: The resulting transcript
        """
        indices = torch.argmax(emission, dim=-1)  # [num_seq,]
        indices = torch.unique_consecutive(indices, dim=-1)
        indices = [i for i in indices if i != self.blank]
        return "".join([self.labels[i] for i in indices])

decoder = GreedyCTCDecoder(labels=bundle.get_labels())
transcript = decoder(emission[0])

print(transcript)
IPython.display.Audio(SPEECH_FILE)

"""# Task 3 - own implementation"""

import torch
import torchaudio
import IPython
import matplotlib.pyplot as plt
from torchaudio.utils import download_asset

print(torch.__version__)
print(torchaudio.__version__)

ResampledWaveform = torch.Tensor
AudioFeatures = torch.Tensor
EmmisionsTensor = torch.Tensor

class TranscriptGenerator():


  def __init__(self):
    torch.random.manual_seed(0)
    self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    self.bundle = torchaudio.pipelines.WAV2VEC2_ASR_BASE_960H
    self.sample_rate = self.bundle.sample_rate
    self.labels = self.bundle.get_labels()
    self.model = self.bundle.get_model().to(self.device)

  def display_audio_file_ipy(self, path_to_file):
    IPython.display.Audio(path_to_file)

  def correct_sampling(self, path_to_file: str) -> ResampledWaveform:
    waveform, sample_rate = torchaudio.load(path_to_file)
    waveform = waveform.to(self.device)

    if sample_rate != self.sample_rate:
      waveform = torchaudio.functional.resample(waveform,sample_rate,self.sample_rate)

    return waveform

  def extract_features(self, waveform: ResampledWaveform)->AudioFeatures:
    with torch.inference_mode():
      features,_ = self.model.extract_features(waveform)
    return features

  def visualise_features(self, features:AudioFeatures)->None:
    fig, ax = plt.subplots(len(features), 1, figsize=(16, 4.3 * len(features)))
    for i, feats in enumerate(features):
        ax[i].imshow(feats[0].cpu(), interpolation="nearest")
        ax[i].set_title(f"Feature from transformer layer {i+1}")
        ax[i].set_xlabel("Feature dimension")
        ax[i].set_ylabel("Frame (time-axis)")
    fig.tight_layout()


  def classification(self, waveform: ResampledWaveform)->EmmisionsTensor:
    with torch.inference_mode():
      emmision, _ = self.model(waveform)

  def visualise_emmisions(self, emmisions: EmmisionsTensor)->None:
    plt.imshow(emission[0].cpu().T, interpolation="nearest")
    plt.title("Classification result")
    plt.xlabel("Frame (time-axis)")
    plt.ylabel("Class")
    plt.tight_layout()
    print("Class labels:", self.labels)

  def pipeline(self, file_path):
    self.display_audio_file_ipy(file_path)
    corrected = self.correct_sampling(file_path)
    features = self.extract_features(corrected)
    self.visualise_features(features)
    emmisions = self.classification(corrected)
    self.visualise_emmisions(emmisions)

tg = TranscriptGenerator()

tg.pipeline(SPEECH_FILE)